const axios = require('axios');

class DescriptionController {
  constructor() {
    // Bind des m√©thodes pour pr√©server le contexte
    this.generateDescription = this.generateDescription.bind(this);
    this.searchProductInfo = this.searchProductInfo.bind(this);
    this.generateSummary = this.generateSummary.bind(this);
    this.generateFromTemplate = this.generateFromTemplate.bind(this);
  }

  async generateDescription(req, res) {
    try {
      const { name, brand } = req.body;
      const isDebugMode = process.env.DEBUG_ENV === 'true';
      console.log(`üîç Recherche de description pour : ${name} ${brand ? `(${brand})` : ''}`);

      if (!name) {
        console.log('‚ùå Erreur : Le nom du produit est requis');
        return res.status(400).json({ message: 'Le nom du produit est requis' });
      }

      // Lancer la recherche d'informations imm√©diatement
      const searchResult = await this.searchProductInfo(name, brand, isDebugMode);
      let rawDescription = searchResult?.description;
      let imageUrl = searchResult?.imageUrl;

      if (!rawDescription) {
        console.log('‚ö†Ô∏è Aucune information trouv√©e via Google Search, utilisation des templates');
        return this.generateFromTemplate(name, brand, res, imageUrl);
      }

      // G√©n√©ration du r√©sum√© via Hugging Face
      try {
        const summary = await this.generateSummary(rawDescription, isDebugMode);
        if (summary) {
          console.log('‚úÖ R√©sum√© g√©n√©r√© via IA :', summary);
          return res.json({ 
            description: summary,
            imageUrl: imageUrl || null
          });
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration du r√©sum√©:', error);
        if (isDebugMode) {
          console.error('üîß Mode Debug - D√©tails de l\'erreur:', error.response?.data || error.message);
        }
      }

      // Si le r√©sum√© √©choue, utiliser la description brute
      return res.json({ 
        description: rawDescription,
        imageUrl: imageUrl || null
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la description:', error);
      return this.generateFromTemplate(name, brand, res);
    }
  }

  async searchProductInfo(name, brand, isDebugMode) {
    try {
      if (!process.env.GOOGLE_API_KEY || !process.env.GOOGLE_CSE_ID) {
        console.log('‚ùå Erreur : Configuration Google Search manquante');
        return null;
      }

      console.log('üì° Appel API Google Search...');
      
      // Premier appel pour la description
      if (isDebugMode) {
        console.log('üîß Mode Debug - Query:', name);
      }

      const descriptionResponse = await axios.get('https://www.googleapis.com/customsearch/v1', {
        params: {
          key: process.env.GOOGLE_API_KEY,
          cx: process.env.GOOGLE_CSE_ID,
          q: name,
          num: 5,
          lr: 'lang_fr',
          safe: 'active'
        }
      });

      // Deuxi√®me appel pour l'image
      const imageResponse = await axios.get('https://www.googleapis.com/customsearch/v1', {
        params: {
          key: process.env.GOOGLE_API_KEY,
          cx: process.env.GOOGLE_CSE_ID,
          q: name,
          num: 5,
          searchType: 'image',
          imgSize: 'large',
          safe: 'active'
        }
      });

      if (isDebugMode) {
        console.log('üîß Mode Debug - R√©ponse description:', JSON.stringify(descriptionResponse.data, null, 2));
        console.log('üîß Mode Debug - R√©ponse image:', JSON.stringify(imageResponse.data, null, 2));
      }

      let description = null;
      let imageUrl = null;

      // Traitement des r√©sultats de description
      if (descriptionResponse.data?.items?.length > 0) {
        description = descriptionResponse.data.items
          .slice(0, 3)
          .map(item => item.snippet || '')
          .filter(snippet => snippet.length > 50)
          .join(' ')
          .replace(/\s+/g, ' ')
          .trim();
      }

      // Traitement des r√©sultats d'image
      if (imageResponse.data?.items?.length > 0) {
        const images = imageResponse.data.items;
        for (const item of images) {
          if (item.link && 
              !item.link.includes('logo') && 
              !item.title?.toLowerCase().includes('logo')) {
            imageUrl = item.link;
            console.log('‚úÖ Image trouv√©e:', imageUrl);
            break;
          }
        }
      }

      if (!imageUrl) {
        console.log('‚ö†Ô∏è Aucune image trouv√©e dans les r√©sultats');
      }

      if (!description && !imageUrl) {
        return null;
      }

      return { description, imageUrl };
    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche Google:', error);
      return null;
    }
  }

  async generateSummary(text, isDebugMode) {
    try {
      if (!process.env.HUGGING_FACE_API_KEY) {
        console.log('‚ùå Erreur : Configuration Hugging Face manquante');
        return null;
      }

      console.log('ü§ñ G√©n√©ration du r√©sum√© via IA...');
      if (isDebugMode) {
        console.log('üîß Mode Debug - Texte √† r√©sumer:', text);
      }

      const response = await axios.post(
        'https://api-inference.huggingface.co/models/csebuetnlp/mT5_multilingual_XLSum',
        {
          inputs: text,
          parameters: {
            max_length: 250,
            min_length: 50,
            do_sample: false
          }
        },
        {
          headers: {
            'Authorization': `Bearer ${process.env.HUGGING_FACE_API_KEY}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (isDebugMode) {
        console.log('üîß Mode Debug - R√©ponse de Hugging Face:', JSON.stringify(response.data, null, 2));
      }

      if (response.data && Array.isArray(response.data) && response.data.length > 0) {
        const summary = response.data[0].summary_text || response.data[0].generated_text;
        if (summary) {
          return summary
            .replace(/\s+/g, ' ')
            .trim()
            .slice(0, 250);
        }
      }

      return null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du r√©sum√©:', error);
      return null;
    }
  }

  generateFromTemplate(name, brand, res, imageUrl = null) {
    const templates = {
      electronics: [
        "[PRODUIT] : une innovation technologique qui red√©finit l'excellence. Profitez d'une exp√©rience utilisateur exceptionnelle gr√¢ce √† ses fonctionnalit√©s avanc√©es et son design √©l√©gant.",
        "D√©couvrez [PRODUIT], l'alliance parfaite entre performance et style. Un appareil con√ßu pour r√©pondre aux exigences des utilisateurs les plus exigeants.",
        "Laissez-vous s√©duire par [PRODUIT], un concentr√© de technologie dans un design raffin√©. La solution id√©ale pour am√©liorer votre quotidien."
      ],
      clothing: [
        "[PRODUIT] : l'expression ultime du style et du confort. Une pi√®ce incontournable qui allie √©l√©gance et praticit√© pour une allure impeccable.",
        "Adoptez [PRODUIT], une cr√©ation qui incarne la mode d'aujourd'hui. Un design contemporain associ√© √† des mat√©riaux de qualit√© pour un look unique.",
        "Sublimez votre style avec [PRODUIT]. Une coupe moderne et des finitions soign√©es pour une tenue qui vous met en valeur."
      ],
      default: [
        "[PRODUIT] : l'excellence au service de votre quotidien. Un produit qui combine qualit√© exceptionnelle et fonctionnalit√© pour une exp√©rience optimale.",
        "D√©couvrez [PRODUIT], la r√©f√©rence dans sa cat√©gorie. Une solution compl√®te qui r√©pond √† tous vos besoins avec style et efficacit√©.",
        "Optez pour [PRODUIT], un choix qui fait la diff√©rence. Des caract√©ristiques premium pour des performances qui d√©passent vos attentes."
      ]
    };

    const productNameLower = name.toLowerCase();
    const brandLower = (brand || '').toLowerCase();

    const electronicsKeywords = ['phone', 'smartphone', 'ordinateur', 'pc', 'laptop', 'tablette', '√©cran', 'tv', 't√©l√©', 'apple', 'samsung', 'sony', 'dell', 'hp', 'lenovo'];
    const clothingKeywords = ['robe', 'pantalon', 'chemise', 'jean', 't-shirt', 'veste', 'manteau', 'zara', 'h&m', 'nike', 'adidas', 'levis'];

    let category = 'default';
    if (electronicsKeywords.some(keyword => productNameLower.includes(keyword) || brandLower.includes(keyword))) {
      category = 'electronics';
    } else if (clothingKeywords.some(keyword => productNameLower.includes(keyword) || brandLower.includes(keyword))) {
      category = 'clothing';
    }

    const selectedTemplates = templates[category];
    const template = selectedTemplates[Math.floor(Math.random() * selectedTemplates.length)];
    const description = template.replace('[PRODUIT]', name);

    console.log(`üìù Description g√©n√©r√©e depuis template (${category}) :`, description);
    return res.json({ 
      description,
      imageUrl: imageUrl || null,
      detectedBrand: brand || null
    });
  }
}

module.exports = new DescriptionController(); 